CREATE TABLE USER_ROLE (
    ROLE_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(20)
);

CREATE TABLE USER_PERMISSION (
    PERMISSION_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(20)
);

CREATE TABLE USER_TABLE (
    USER_ID NUMBER PRIMARY KEY,
    ROLE_ID NUMBER,
    BRANCH_ID NUMBER,
    NAME VARCHAR2(20),
    LAST_NAME VARCHAR2(50),
    USERNAME VARCHAR2(25),
    EMAIL VARCHAR2(30),
    PASSWORD VARCHAR2(15),
    ACTIVE CHAR(1),
    CONSTRAINT FK_ROLE FOREIGN KEY (ROLE_ID) REFERENCES USER_ROLE(ROLE_ID),
    CONSTRAINT FK_BRANCH FOREIGN KEY (BRANCH_ID) REFERENCES BRANCH(BRANCH_ID)
);

CREATE TABLE SHIFT (
    SHIFT_ID NUMBER PRIMARY KEY,
    START_TIME CHAR(8),
    END_TIME CHAR(8),
    NAME VARCHAR2(20)
);

CREATE TABLE BRANCH (
    BRANCH_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(20),
    ADDRESS VARCHAR2(200),
    PHONE VARCHAR2(15),
    EMAIL VARCHAR2(30),
    ACTIVE CHAR(1)
);

CREATE TABLE USER_CLIENT (
    CLIENT_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(20),
    EMAIL VARCHAR2(30),
    PASSWORD VARCHAR2(15),
    REGISTER CHAR(1),
    ADDRESS VARCHAR2(200),
    NIT VARCHAR2(15),
    CLIENT_CODE NUMBER
);

CREATE TABLE SALE (
    SALE_ID NUMBER PRIMARY KEY,
    CLIENT_ID NUMBER,
    PAYMENT_METHOD_ID NUMBER,
    USER_ID NUMBER,
    TOTAL NUMBER(10, 2),
    SALE_DATE DATE,
    MAILING_ADDRESS VARCHAR2(255),
    INVOICE_NUMBER VARCHAR2(200),
    INVOICE_SERIES VARCHAR2(200),
    STATUS CHAR(10),
    SALE_NUMBER NUMBER,
    CONSTRAINT FK_CLIENT FOREIGN KEY (CLIENT_ID) REFERENCES USER_CLIENT(CLIENT_ID),
    CONSTRAINT FK_PAYMENT_METHOD FOREIGN KEY (PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHOD(PAYMENT_METHOD_ID),
    CONSTRAINT FK_USER FOREIGN KEY (USER_ID) REFERENCES USER_TABLE(USER_ID)
);

CREATE TABLE SALES_DETAIL (
    SALE_DETAIL_ID NUMBER PRIMARY KEY,
    SALE_ID NUMBER,
    PRODUCT_ID NUMBER,
    QUANTITY NUMBER,
    UNIT_PRICE NUMBER(10, 2),
    SUB_TOTAL NUMBER(10, 2),
    CONSTRAINT FK_SALE FOREIGN KEY (SALE_ID) REFERENCES SALE(SALE_ID),
    CONSTRAINT FK_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
);

CREATE TABLE PRODUCT (
    PRODUCT_ID NUMBER PRIMARY KEY,
    SKU VARCHAR2(50),
    LINE_ID NUMBER,
    CATEGORY_ID NUMBER,
    NAME VARCHAR2(200),
    SPECS CLOB,
    PRICE NUMBER(10, 2),
    URL_IMAGE VARCHAR2(100),
    ACTIVE CHAR(1),
    CONSTRAINT FK_LINE FOREIGN KEY (LINE_ID) REFERENCES PRODUCT_LINE(LINE_ID),
    CONSTRAINT FK_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES PRODUCT_CATEGORY(CATEGORY_ID)
);

CREATE TABLE PRODUCT_LINE (
    LINE_ID NUMBER PRIMARY KEY,
    BRAND_ID NUMBER,
    NAME VARCHAR2(20),
    CONSTRAINT FK_BRAND FOREIGN KEY (BRAND_ID) REFERENCES BRAND(BRAND_ID)
);

CREATE TABLE BRAND (
    BRAND_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(20)
);

CREATE TABLE PRODUCT_CATEGORY (
    CATEGORY_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(20)
);

CREATE TABLE INVENTORY_MOVEMENT (
    MOVEMENT_ID NUMBER PRIMARY KEY,
    PURCHASE_ID NUMBER,
    SALE_ID NUMBER,
    USER_ID NUMBER,
    SALE_DETAIL_ID NUMBER,
    PURCHASE_DETAIL_ID NUMBER,
    MOVEMENT_TYPE CHAR(5),
    MOVEMENT_DATE DATE,
    QUANTITY NUMBER,
    CONSTRAINT FK_INVENTORY_PURCHASE FOREIGN KEY (PURCHASE_ID) REFERENCES PURCHASE(PURCHASE_ID),
    CONSTRAINT FK_INVENTORY_SALE FOREIGN KEY (SALE_ID) REFERENCES SALE(SALE_ID), 
    CONSTRAINT FK_INVENTORY_SALE_DETAIL FOREIGN KEY (SALE_DETAIL_ID) REFERENCES SALES_DETAIL(SALE_DETAIL_ID),
    CONSTRAINT FK_INVENTORY_PURCHASE_DETAIL FOREIGN KEY (PURCHASE_DETAIL_ID) REFERENCES PURCHASE_DETAIL(PURCHASE_DETAIL_ID)
);



CREATE TABLE INVENTORY (
    INVENTORY_ID NUMBER PRIMARY KEY,
    PRODUCT_ID NUMBER,
    BRANCH_ID NUMBER,
    STOCK NUMBER,
    CONSTRAINT FK_INVENTORY_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID),
    CONSTRAINT FK_INVENTORY_BRANCH FOREIGN KEY (BRANCH_ID) REFERENCES BRANCH(BRANCH_ID)
);

CREATE TABLE PURCHASE (
    PURCHASE_ID NUMBER PRIMARY KEY,
    SUPPLIER_ID NUMBER,
    PAYMENT_METHOD_ID NUMBER,
    USER_ID NUMBER,
    PURCHASE_DATE DATE,
    TOTAL NUMBER(10, 2),
    STATUS CHAR(10),
    PURCHASE_NUMBER NUMBER,
    CONSTRAINT FK_SUPPLIER FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIER(SUPPLIER_ID),
    CONSTRAINT FK_PURCHASE_PAYMENT_METHOD FOREIGN KEY (PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHOD(PAYMENT_METHOD_ID),
    CONSTRAINT FK_PURCHASE_USER FOREIGN KEY (USER_ID) REFERENCES USER_TABLE(USER_ID)
);

CREATE TABLE PURCHASE_DETAIL (
    PURCHASE_DETAIL_ID NUMBER PRIMARY KEY,
    PURCHASE_ID NUMBER,
    PRODUCT_ID NUMBER,
    QUANTITY NUMBER,
    UNIT_PRICE NUMBER(10, 2),
    SUB_TOTAL NUMBER(10, 2),
    CONSTRAINT FK_PURCHASE_DETAIL FOREIGN KEY (PURCHASE_ID) REFERENCES PURCHASE(PURCHASE_ID),
    CONSTRAINT FK_PURCHASE_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
);

CREATE TABLE TRANSACTION_AUDIT (
    AUDIT_ID NUMBER PRIMARY KEY,
    USER_ID NUMBER,
    AUDIT_DATE DATE,
    TABLE_NAME VARCHAR2(30),
    FIELD_NAME VARCHAR2(30),
    EVENT CHAR(10),
    PREVIOUS_VALUE CLOB,
    CURRENT_VALUE CLOB,
    CONSTRAINT FK_AUDIT_USER FOREIGN KEY (USER_ID) REFERENCES USER_TABLE(USER_ID)
);

CREATE TABLE SUPPLIER (
    SUPPLIER_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(20),
    ADDRESS VARCHAR2(200),
    PHONE VARCHAR2(15),
    EMAIL VARCHAR2(30),
    NIT VARCHAR2(15)
);

CREATE TABLE PAYMENT_METHOD (
    PAYMENT_METHOD_ID NUMBER PRIMARY KEY,
    PAYMENT_METHOD CHAR(18)
);

CREATE TABLE ROLE_PERMISSION (
    PERMISSION_ID NUMBER,
    ROLE_ID NUMBER,
    PRIMARY KEY (PERMISSION_ID, ROLE_ID),
    CONSTRAINT FK_ROLE_PERMISSION FOREIGN KEY (PERMISSION_ID) REFERENCES USER_PERMISSION(PERMISSION_ID),
    CONSTRAINT FK_PERMISSION_ROLE FOREIGN KEY (ROLE_ID) REFERENCES USER_ROLE(ROLE_ID)
);

CREATE TABLE OPTION_TABLE (
    OPTION_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(20),
    ROUTE VARCHAR2(100),
    ICON VARCHAR2(100),
    ORDER_NUMBER NUMBER,
    ACTIVE CHAR(1)
);

CREATE TABLE ROLE_OPTION (
    OPTION_ID NUMBER,
    ROLE_ID NUMBER,
    PRIMARY KEY (OPTION_ID, ROLE_ID),
    CONSTRAINT FK_ROLE_OPTION FOREIGN KEY (OPTION_ID) REFERENCES OPTION_TABLE(OPTION_ID),
    CONSTRAINT FK_OPTION_ROLE FOREIGN KEY (ROLE_ID) REFERENCES USER_ROLE(ROLE_ID)
);

CREATE TABLE SALE_PAYMENT_DETAIL (
    SALE_ID NUMBER,
    PAYMENT_METHOD_ID NUMBER,
    AMOUNT NUMBER(10, 2),
    PRIMARY KEY (SALE_ID, PAYMENT_METHOD_ID),
    CONSTRAINT FK_SALE_PAYMENT_DETAIL FOREIGN KEY (SALE_ID) REFERENCES SALE(SALE_ID),
    CONSTRAINT FK_PAYMENT_METHOD_SALE FOREIGN KEY (PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHOD(PAYMENT_METHOD_ID)
);

CREATE TABLE USER_SHIFT (
    USER_ID NUMBER,
    SHIFT_ID NUMBER,
    SHIFT_DATE DATE,
    PRIMARY KEY (USER_ID, SHIFT_ID, SHIFT_DATE),
    CONSTRAINT FK_USER_SHIFT_USER FOREIGN KEY (USER_ID) REFERENCES USER_TABLE(USER_ID),
    CONSTRAINT FK_USER_SHIFT_SHIFT FOREIGN KEY (SHIFT_ID) REFERENCES SHIFT(SHIFT_ID)
);
